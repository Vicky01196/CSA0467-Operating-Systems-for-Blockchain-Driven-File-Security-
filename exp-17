#include <stdio.h>
#include <stdbool.h>

#define P 5  // Number of processes
#define R 3  // Number of resources

int alloc[P][R], max[P][R], need[P][R], avail[R];

bool isSafe() {
    int work[R];
    bool finish[P] = {0};
    for (int i = 0; i < R; i++) work[i] = avail[i];

    while (1) {
        bool progress = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                bool canAllocate = true;
                for (int r = 0; r < R; r++) {
                    if (need[p][r] > work[r]) {
                        canAllocate = false;
                        break;
                    }
                }
                if (canAllocate) {
                    for (int r = 0; r < R; r++) work[r] += alloc[p][r];
                    finish[p] = 1;
                    progress = true;
                    break;
                }
            }
        }
        if (!progress) break;
    }

    for (int p = 0; p < P; p++) {
        if (!finish[p]) return false;
    }
    return true;
}

int main() {
    // Example data
    int i, j;
    
    // Allocation Matrix
    alloc[0][0] = 0; alloc[0][1] = 1; alloc[0][2] = 0;
    alloc[1][0] = 2; alloc[1][1] = 0; alloc[1][2] = 0;
    alloc[2][0] = 3; alloc[2][1] = 3; alloc[2][2] = 2;
    alloc[3][0] = 2; alloc[3][1] = 1; alloc[3][2] = 1;
    alloc[4][0] = 0; alloc[4][1] = 0; alloc[4][2] = 2;

    // Max Matrix
    max[0][0] = 7; max[0][1] = 5; max[0][2] = 3;
    max[1][0] = 3; max[1][1] = 2; max[1][2] = 2;
    max[2][0] = 9; max[2][1] = 0; max[2][2] = 2;
    max[3][0] = 4; max[3][1] = 2; max[3][2] = 2;
    max[4][0] = 5; max[4][1] = 3; max[4][2] = 3;

    // Available resources
    avail[0] = 3;
    avail[1] = 3;
    avail[2] = 2;

    // Calculating Need Matrix
    for (i = 0; i < P; i++) {
        for (j = 0; j < R; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
