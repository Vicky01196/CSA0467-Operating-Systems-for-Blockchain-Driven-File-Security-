#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MSG_SIZE 100

// Define message structure
struct msg_buffer {
    long msg_type;
    char msg_text[MSG_SIZE];
};

int main() {
    key_t key;
    int msgid;
    struct msg_buffer message;

    // Generate unique key
    key = ftok("ipc_msgqueue", 65);

    // Create message queue
    msgid = msgget(key, 0666 | IPC_CREAT);

    if (fork() == 0) {
        // Child process: Receiver
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Received message: %s\n", message.msg_text);

        // Destroy the message queue
        msgctl(msgid, IPC_RMID, NULL);
    } else {
        // Parent process: Sender
        message.msg_type = 1;
        strncpy(message.msg_text, "Hello from sender!", MSG_SIZE);
        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        printf("Message sent: %s\n", message.msg_text);

        // Wait for the child to finish
        wait(NULL);
    }

    return 0;
}
