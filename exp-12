#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left = id;                    // Left chopstick index
    int right = (id + 1) % NUM_PHILOSOPHERS; // Right chopstick index

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3 + 1);

        // Hungry, trying to pick up chopsticks
        printf("Philosopher %d is hungry.\n", id);

        // Avoid deadlock by always picking the lower-indexed chopstick first
        if (id % 2 == 0) {
            pthread_mutex_lock(&chopsticks[left]);
            printf("Philosopher %d picked up left chopstick %d.\n", id, left);
            pthread_mutex_lock(&chopsticks[right]);
            printf("Philosopher %d picked up right chopstick %d.\n", id, right);
        } else {
            pthread_mutex_lock(&chopsticks[right]);
            printf("Philosopher %d picked up right chopstick %d.\n", id, right);
            pthread_mutex_lock(&chopsticks[left]);
            printf("Philosopher %d picked up left chopstick %d.\n", id, left);
        }

        // Eating
        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 3 + 1);

        // Put down chopsticks
        pthread_mutex_unlock(&chopsticks[left]);
        printf("Philosopher %d put down left chopstick %d.\n", id, left);
        pthread_mutex_unlock(&chopsticks[right]);
        printf("Philosopher %d put down right chopstick %d.\n", id, right);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize mutexes for chopsticks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        if (pthread_create(&philosophers[i], NULL, philosopher, &ids[i]) != 0) {
            perror("Failed to create thread");
            exit(1);
        }
    }

    // Join philosopher threads (in practice, this will run indefinitely)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes for chopsticks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    return 0;
}
