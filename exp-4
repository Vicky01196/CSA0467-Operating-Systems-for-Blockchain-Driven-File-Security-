#include <stdio.h>

typedef struct {
    int id;
    int burst_time;
    int wait_time;
    int turn_around_time;
} Process;

void calculateTimes(Process processes[], int n) {
    int completed = 0, time = 0, min_burst, shortest, finish_time;
    int is_completed[n];
    for (int i = 0; i < n; i++) is_completed[i] = 0;

    while (completed < n) {
        shortest = -1;
        min_burst = __INT_MAX__;

        for (int i = 0; i < n; i++) {
            if (!is_completed[i] && processes[i].burst_time < min_burst) {
                min_burst = processes[i].burst_time;
                shortest = i;
            }
        }

        if (shortest == -1) break;

        time += processes[shortest].burst_time;
        finish_time = time;
        processes[shortest].turn_around_time = finish_time;
        processes[shortest].wait_time = finish_time - processes[shortest].burst_time;
        is_completed[shortest] = 1;
        completed++;
    }
}

void printProcesses(Process processes[], int n) {
    float total_wait = 0, total_tat = 0;

    printf("P\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        total_wait += processes[i].wait_time;
        total_tat += processes[i].turn_around_time;
        printf("%d\t%d\t%d\t%d\n", processes[i].id, processes[i].burst_time,
               processes[i].wait_time, processes[i].turn_around_time);
    }

    printf("Average Wait Time: %.2f\n", total_wait / n);
    printf("Average Turnaround Time: %.2f\n", total_tat / n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        processes[i].id = i + 1;
        scanf("%d", &processes[i].burst_time);
    }

    calculateTimes(processes, n);
    printProcesses(processes, n);

    return 0;
}
