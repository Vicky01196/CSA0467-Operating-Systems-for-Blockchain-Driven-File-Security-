#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void worstFit(int blocks[], int blockCount, int processes[], int processCount) {
    // Array to track whether a block is allocated or not
    int allocation[MAX_PROCESSES];

    // Initialize allocation array to -1 (i.e., no allocation)
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1;
    }

    // Perform worst fit allocation
    for (int i = 0; i < processCount; i++) {
        int worstIndex = -1;
        int maxBlockSize = -1;

        // Find the block with the worst fit (largest block that can fit the process)
        for (int j = 0; j < blockCount; j++) {
            if (blocks[j] >= processes[i] && blocks[j] > maxBlockSize) {
                maxBlockSize = blocks[j];
                worstIndex = j;
            }
        }

        // If we found a suitable block
        if (worstIndex != -1) {
            allocation[i] = worstIndex;
            blocks[worstIndex] -= processes[i];  // Reduce the size of the block
        }
    }

    // Output the result of allocation
    printf("\nProcess No\tProcess Size\tBlock No\tBlock Size\n");
    for (int i = 0; i < processCount; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
        }
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES];
    int blockCount, processCount;

    // Input the number of blocks and processes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &blockCount);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < blockCount; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &processCount);

    printf("Enter the size of each process:\n");
    for (int i = 0; i < processCount; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i]);
    }

    // Call the worst fit algorithm function
    worstFit(blocks, blockCount, processes, processCount);

    return 0;
}
