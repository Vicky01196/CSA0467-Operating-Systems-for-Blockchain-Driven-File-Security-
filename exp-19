#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t lock;

void *critical_section(void *arg) {
    int id = *(int *)arg;

    pthread_mutex_lock(&lock);
    printf("Thread %d is in the critical section.\n", id);
    sleep(1); // Simulate work in the critical section
    pthread_mutex_unlock(&lock);

    printf("Thread %d is leaving the critical section.\n", id);
    return NULL;
}

int main() {
    pthread_t threads[3];
    int ids[3];

    pthread_mutex_init(&lock, NULL);

    for (int i = 0; i < 3; i++) {
        ids[i] = i;
        pthread_create(&threads[i], NULL, critical_section, &ids[i]);
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&lock);
    return 0;
}
