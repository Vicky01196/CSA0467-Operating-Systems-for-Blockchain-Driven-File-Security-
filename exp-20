#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex; // Semaphore for reader-writer mutual exclusion
sem_t mutex;    // Semaphore to protect the read_count variable
int read_count = 0;

void *reader(void *arg) {
    int id = *(int *)arg;

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) {
        sem_wait(&rw_mutex); // First reader locks the writer
    }
    sem_post(&mutex);

    printf("Reader %d is reading.\n", id);
    sleep(1); // Simulate reading

    sem_wait(&mutex);
    read_count--;
    if (read_count == 0) {
        sem_post(&rw_mutex); // Last reader unlocks the writer
    }
    sem_post(&mutex);

    printf("Reader %d has finished reading.\n", id);
    return NULL;
}

void *writer(void *arg) {
    int id = *(int *)arg;

    sem_wait(&rw_mutex);
    printf("Writer %d is writing.\n", id);
    sleep(1); // Simulate writing
    sem_post(&rw_mutex);

    printf("Writer %d has finished writing.\n", id);
    return NULL;
}

int main() {
    pthread_t readers[3], writers[2];
    int r_ids[3], w_ids[2];

    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    for (int i = 0; i < 3; i++) {
        r_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &r_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        w_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &w_ids[i]);
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(readers[i], NULL);
    }

    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);
    return 0;
}
