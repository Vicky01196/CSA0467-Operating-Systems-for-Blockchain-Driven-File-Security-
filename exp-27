#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>

void listFiles(const char *path, int detailed, int showHidden) {
    struct dirent *entry;
    DIR *dp = opendir(path);

    if (dp == NULL) {
        perror("opendir failed");
        exit(1);
    }

    while ((entry = readdir(dp)) != NULL) {
        // Skip hidden files if -a is not passed
        if (!showHidden && entry->d_name[0] == '.') {
            continue;
        }

        // If detailed output (-l), display file info
        if (detailed) {
            struct stat fileStat;
            if (stat(entry->d_name, &fileStat) == -1) {
                perror("stat failed");
                exit(1);
            }

            printf((S_ISDIR(fileStat.st_mode)) ? "d" : "-");
            printf((fileStat.st_mode & S_IRUSR) ? "r" : "-");
            printf((fileStat.st_mode & S_IWUSR) ? "w" : "-");
            printf((fileStat.st_mode & S_IXUSR) ? "x" : "-");
            printf(" %ld ", fileStat.st_nlink);
            printf("%ld ", fileStat.st_size);
            printf("%s\n", entry->d_name);
        } else {
            // Simple listing without detailed info
            printf("%s  ", entry->d_name);
        }
    }

    closedir(dp);
}

int main(int argc, char *argv[]) {
    int detailed = 0, showHidden = 0;
    char *dirPath = ".";  // Default to current directory

    // Parse command-line options
    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-l") == 0) {
            detailed = 1;
        } else if (strcmp(argv[i], "-a") == 0) {
            showHidden = 1;
        } else {
            dirPath = argv[i];
        }
    }

    // List files with or without detailed info and hidden files
    listFiles(dirPath, detailed, showHidden);

    return 0;
}
